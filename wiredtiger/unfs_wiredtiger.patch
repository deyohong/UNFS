diff --git a/src/conn/conn_api.c b/src/conn/conn_api.c
index 5061724..0dd266f 100644
--- a/src/conn/conn_api.c
+++ b/src/conn/conn_api.c
@@ -2058,6 +2058,39 @@ wiredtiger_dummy_session_init(
 	session->iface.strerror = __wt_session_strerror;
 }
 
+/**
+ * Allocate and convert a wiredtiger config string that points to UNFS.
+ * The returned config string must be free by caller.
+ */
+static char* unfs_config(const char* home, const char* config, const char* device)
+{
+	if (!home) home = "";
+	if (!config) config = "";
+
+	size_t len = strlen(config);
+	char* newconfig = malloc(len + strlen(home) + 256);
+	strcpy(newconfig, config);
+
+	// check if string has already been converted
+	if (!strstr(config, "unfs_wiredtiger_init")) {
+		// lazy check for extensions string
+		const char* ext = strstr(config, "extensions=[");
+		if (ext) {
+			len = ext - config + 12;
+			strncpy(newconfig, config, len);
+		} else {
+			sprintf(newconfig + len, ",extensions=[");
+			len += 13;
+		}
+		sprintf(newconfig + len, "local={entry=unfs_wiredtiger_init,early_load=true,config=(device=\"%s\",home=\"%s\")}]", device, home);
+		if (ext) sprintf(newconfig + strlen(newconfig) - 1, ",%s", ext + 12);
+
+		printf("@CONFIG: %s\n", newconfig);
+	}
+
+	return newconfig;
+}
+
 /*
  * wiredtiger_open --
  *	Main library entry point: open a new connection to a WiredTiger
@@ -2067,6 +2100,13 @@ int
 wiredtiger_open(const char *home, WT_EVENT_HANDLER *event_handler,
     const char *config, WT_CONNECTION **wt_connp)
 {
+	char* unfsconfig = NULL;
+	const char* device = getenv("UNFS_DEVICE");
+        if (device) {
+        	unfsconfig = unfs_config(home, config, device);
+		config = unfsconfig;
+	}
+
 	static const WT_CONNECTION stdc = {
 		__conn_async_flush,
 		__conn_async_new_op,
@@ -2456,6 +2496,8 @@ err:	/* Discard the scratch buffers. */
 	__wt_scr_free(session, &i3);
 
 	__wt_free(session, merge_cfg);
+	if (unfsconfig) free(unfsconfig);
+
 	/*
 	 * We may have allocated scratch memory when using the dummy session or
 	 * the subsequently created real session, and we don't want to tie down

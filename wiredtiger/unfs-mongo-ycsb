#!/bin/sh
# This script may be used to run YCSB benchmarks for MongoDB on UNFS.
#
# Based on the specified device name, it will assume proper setup for running
# MongoDB on UNFS (using UNVMe driver or raw device) or on native filesystem.
#
# This test must be run from the mongo source directory.
# Output results will be saved to the "ycsb-results" directory.
#
# Run on UNFS using UNVMe driver:
#   $ unvme-setup
#   $ export UNFS_DEVICE 07:00.0
#   $ unfs-mongo-ycsb
#
# Run on UNFS using raw device:
#   $ unvme-setup reset
#   $ export UNFS_DEVICE /dev/nvme0n1
#   $ unfs-mongo-ycsb
#
# Run on native filesystem (assume XFS):
#   $ unvme-setup reset
#   $ unset UNFS_DEVICE
#   $ mkfs -t xfs /dev/nvme0n1
#   $ mount /dev/nvme0n1 /data
#   $ unfs-mongo-ycsb
#

# Program name and usage
PROG=$(basename $0)
USAGE="Usage: ${PROG} [DEVICE_NAME] [KEY=VALUE]..."

# Default test options
: ${THREADS="1 8 16"}
: ${OPCOUNT=1000000}
: ${READS="95 50 5"}
: ${MONGODRV=mongodb}
#: ${MONGODRV=mongodb-async}

# Default test directories
: ${YCSB=/opt/ycsb/bin/ycsb}
: ${MONGOD=./mongod}
: ${DBPATH=/data/ycsb}
: ${LOGDIR=./ycsb-results}

# YCSB workload
YCSBTEXT="workload=com.yahoo.ycsb.workloads.CoreWorkload
recordcount=${OPCOUNT}
operationcount=${OPCOUNT}
readallfields=true
scanproportion=0
insertproportion=0
requestdistribution=zipfian"


prompt()
{
    #read -p "Press <Enter> to continue..."
    echo -e "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    sleep 5
}

kill_proc()
{
    pkill -f $1
    while [ -n "$(pgrep -f $1)" ]; do
        sleep 3
    done
}

poll_status()
{
    lc=0
    while [ 1 ]; do
        lcn=$(wc -l $1 | cut -d' ' -f1)
        if [ ${lc} -eq ${lcn} ]; then
            sleep 5
            continue
        fi
        ((lc++))
        out=$(sed -n "${lc},${lcn}p" $1)
        lc=${lcn}
        echo "${out}"
        if [[ ${out} =~ "$2" ]]; then
            sleep 5
            break
        elif [[ ${out} =~ (Exception:|BACKTRACE|Connection refused) ]]; then
            ERROR=1
            break
        fi
    done
}

run_mongod()
{
    logfile=${LOGPREFIX}.${OPCOUNT}.t$1.mongod.${LOGSUFFIX}
    echo -e "\n${logfile}"
    rm -rf ${DBPATH} ${logfile}
    mkdir -p ${DBPATH}
    if [ -n "${UNFS_DEVICE}" ]; then
        export UNFS_DEVICE=${UNFS_DEVICE}
        unfs_format > ${logfile} 2>&1
        echo > ${logfile}
    fi

    cmd="numactl --interleave=all ${MONGOD} --quiet --dbpath ${DBPATH} ${CONFIG}"
    echo -e "\n=== ${cmd}" >> ${logfile}
    ${cmd} >> ${logfile} 2>&1 &
    poll_status ${logfile} 'waiting for connections'
    if [ ${ERROR} -ne 0 ]; then
        kill_proc ${MONGOD}
        exit 1
    fi
    prompt
}

load_ycsb()
{
    logfile=${LOGPREFIX}.${OPCOUNT}.t$1.load.${LOGSUFFIX}
    log9505=${LOGPREFIX}.${OPCOUNT}.t$1.r95w05.${LOGSUFFIX}
    log5050=${LOGPREFIX}.${OPCOUNT}.t$1.r50w50.${LOGSUFFIX}
    log0595=${LOGPREFIX}.${OPCOUNT}.t$1.r05w95.${LOGSUFFIX}

    # check if all tests have run successfully
    if [ -e ${logfile} ] && [ -n "$(grep '[INSERT], Return=OK,' ${logfile})" ] && \
       [ -e ${log9505} ] && [ -n "$(grep '[UPDATE], Return=OK,' ${log9505})" ] && \
       [ -e ${log5050} ] && [ -n "$(grep '[UPDATE], Return=OK,' ${log5050})" ] && \
       [ -e ${log0595} ] && [ -n "$(grep '[UPDATE], Return=OK,' ${log0595})" ]; then
        echo -e "\nSkip ${logfile}..."
    else
        echo -e "\n${logfile}"
        cmd="${YCSB} load ${MONGODRV} -P ${WORKLOAD} -threads $1"
        echo "=== ${cmd}" > ${logfile}
        echo "+++ $(date)" >> ${logfile}
        ${cmd} >> ${logfile} 2>&1 &
        poll_status ${logfile} 'Return=OK'
        echo "+++ $(date)" | tee -a ${logfile}
        if [ ${ERROR} -ne 0 ]; then
            kill_proc ${YCSB}
            kill_proc ${MONGOD}
            exit 1
        fi
    fi
    prompt
}

run_ycsb()
{
    rp=$(printf '%02d' $2)
    wp=$(printf '%02d' $((100-$2)))
    logfile=${LOGPREFIX}.${OPCOUNT}.t$1.r${rp}w${wp}.${LOGSUFFIX}

    # check if test has run successfully
    if [ -e ${logfile} ] && [ -n "$(grep '[UPDATE], Return=OK,' ${logfile})" ]; then
        echo -e "\nSkip ${logfile}..."
    else
        echo -e "\n${logfile}"
        cmd="${YCSB} run ${MONGODRV} -P ${WORKLOAD} -threads $1 -p readproportion=.${rp} -p updateproportion=.${wp}"
        echo "=== ${cmd}" > ${logfile}
        echo "+++ $(date)" >> ${logfile}
        ${cmd} >> ${logfile} 2>&1 &
        poll_status ${logfile} '[UPDATE], Return=OK'
        echo "+++ $(date)" | tee -a ${logfile}
        if [ ${ERROR} -ne 0 ]; then
            kill_proc ${YCSB}
            kill_proc ${MONGOD}
            exit 1
        fi
    fi
    prompt
}


# Check executables
if [ ! -x ${YCSB} ]; then echo "${YCSB} not found"; exit; fi
if [ ! -x ${MONGOD} ]; then echo "${MONGOD} not found"; exit; fi

# Parse test arguments
for i in $@; do
    case $i in
    [0-9A-Fa-f][0-9A-Fa-f]:[0-9A-Fa-f][0-9A-Fa-f].[0-9A-Fa-f])
        export UNFS_DEVICE=$i
        ;;

    /dev/*)
        export UNFS_DEVICE=$i
        ;;

    *=*)
        # Workload key=value may be specified to override defaults
        pattern=${i/=*/}
        if [[ "${YCSBTEXT}" =~ "${pattern}=" ]]; then
            YCSBTEXT=$(echo "${YCSBTEXT}" | sed "s/${pattern}=[_0-9A-Za-z]\+/$i/g")
        else
            YCSBTEXT="${YCSBTEXT}\n$i"
        fi
        ;;

    *)
        echo ${USAGE}
        exit 1
        ;;
    esac
done

case ${UNFS_DEVICE} in
[0-9A-Fa-f][0-9A-Fa-f]:[0-9A-Fa-f][0-9A-Fa-f].[0-9A-Fa-f])
    echo "Run YCSB on MongoDB with UNFS UNVMe Device ${UNFS_DEVICE}"
    CONFIG='--wiredTigerEngineConfigString extensions=[libunfswt.so={entry=unfs_wt_init,early_load=true}]'
    LOGSUFFIX="unvme.log"
    ;;
/dev/*)
    echo "Run YCSB on MongoDB with UNFS Raw Device ${UNFS_DEVICE}"
    CONFIG='--wiredTigerEngineConfigString extensions=[libunfswt.so={entry=unfs_wt_init,early_load=true}]'
    LOGSUFFIX="raw.log"
    ;;
*)
    echo "Run YCSB on MongoDB with Native Filesystem"
    LOGSUFFIX="xfs.log"
    ;;
esac

# Adjust OPCOUNT in case it was changed with specified parameter
OPCOUNT=$(echo ${YCSBTEXT} | sed 's/.*operationcount=\([0-9]\+\).*/\1/')

# Create log directory
LOGPREFIX=${LOGDIR}/${HOSTNAME}
mkdir -p ${LOGDIR}

# Generate workload file
WORKLOAD=${LOGPREFIX}.${OPCOUNT}.workload
echo "${YCSBTEXT}" > ${WORKLOAD}
if [ $? -ne 0 ]; then exit; fi

sudo sh -c "echo never > /sys/kernel/mm/transparent_hugepage/enabled"
sudo sh -c "echo never > /sys/kernel/mm/transparent_hugepage/defrag"

kill_proc mongod
ERROR=0

for t in ${THREADS}; do
    run_mongod $t
    load_ycsb $t
    for r in ${READS}; do
        run_ycsb $t $r
    done
    kill_proc mongod
done

